@charset "UTF-8";
/* ==========================================================================
   Normalize.scss settings
   ========================================================================== */
/**
 * Includes legacy browser support IE6/7
 *
 * Set to false if you want to drop support for IE6 and IE7
 */
/* Base
   ========================================================================== */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 * 3. Corrects text resizing oddly in IE 6/7 when body `font-size` is set using
 *  `em` units.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Remove default margin.
 */
body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
 * Prevents modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none;
}

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active, a:hover {
  outline: 0;
}

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Addresses styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* Embedded content
   ========================================================================== */
/**
 * 1. Remove border when inside `a` element in IE 8/9/10.
 * 2. Improves image quality when scaled in IE 7.
 */
img {
  border: 0;
}

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px;
}

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0;
}

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 * Correct font family set oddly in IE 6, Safari 4/5, and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *  Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 * 4. Improves appearance and consistency in all browsers.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *  and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *  `input` and others.
 * 4. Removes inner spacing in IE 7 without affecting normal text inputs.
 *  Known issue: inner spacing remains in IE 6.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal;
}

/**
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 *  Known issue: excess padding remains in IE 6.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 * 3. Corrects text not wrapping in Firefox 3.
 * 4. Corrects alignment displayed oddly in IE 6/7.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold;
}

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}

/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
* {
  box-sizing: border-box;
}

.container {
  *zoom: 1;
  margin: 0 auto;
}
.container:before, .container:after {
  content: '';
  display: table;
}
.container:after {
  clear: both;
}

.row {
  *zoom: 1;
}
.row:before, .row:after {
  content: '';
  display: table;
}
.row:after {
  clear: both;
}

@media (min-width: 768px) {
  .container {
    max-width: 95%;
  }

  .col--1 {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 5.92105%;
    margin-left: 0%;
    margin-right: 2.63158%;
  }
  .col--1:before, .col--1:after {
    content: '';
    display: table;
  }
  .col--1:after {
    clear: both;
  }
  .col--1:last-child {
    margin-right: 0%;
  }

  .col--push-1 {
    position: relative;
    left: 8.55263%;
  }

  .col--pull-1 {
    position: relative;
    left: -8.55263%;
  }

  .col--2 {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 14.47368%;
    margin-left: 0%;
    margin-right: 2.63158%;
  }
  .col--2:before, .col--2:after {
    content: '';
    display: table;
  }
  .col--2:after {
    clear: both;
  }
  .col--2:last-child {
    margin-right: 0%;
  }

  .col--push-2 {
    position: relative;
    left: 17.10526%;
  }

  .col--pull-2 {
    position: relative;
    left: -17.10526%;
  }

  .col--3 {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 23.02632%;
    margin-left: 0%;
    margin-right: 2.63158%;
  }
  .col--3:before, .col--3:after {
    content: '';
    display: table;
  }
  .col--3:after {
    clear: both;
  }
  .col--3:last-child {
    margin-right: 0%;
  }

  .col--push-3 {
    position: relative;
    left: 25.65789%;
  }

  .col--pull-3 {
    position: relative;
    left: -25.65789%;
  }

  .col--4 {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 31.57895%;
    margin-left: 0%;
    margin-right: 2.63158%;
  }
  .col--4:before, .col--4:after {
    content: '';
    display: table;
  }
  .col--4:after {
    clear: both;
  }
  .col--4:last-child {
    margin-right: 0%;
  }

  .col--push-4 {
    position: relative;
    left: 34.21053%;
  }

  .col--pull-4 {
    position: relative;
    left: -34.21053%;
  }

  .col--5 {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 40.13158%;
    margin-left: 0%;
    margin-right: 2.63158%;
  }
  .col--5:before, .col--5:after {
    content: '';
    display: table;
  }
  .col--5:after {
    clear: both;
  }
  .col--5:last-child {
    margin-right: 0%;
  }

  .col--push-5 {
    position: relative;
    left: 42.76316%;
  }

  .col--pull-5 {
    position: relative;
    left: -42.76316%;
  }

  .col--6 {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 48.68421%;
    margin-left: 0%;
    margin-right: 2.63158%;
  }
  .col--6:before, .col--6:after {
    content: '';
    display: table;
  }
  .col--6:after {
    clear: both;
  }
  .col--6:last-child {
    margin-right: 0%;
  }

  .col--push-6 {
    position: relative;
    left: 51.31579%;
  }

  .col--pull-6 {
    position: relative;
    left: -51.31579%;
  }

  .col--7 {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 57.23684%;
    margin-left: 0%;
    margin-right: 2.63158%;
  }
  .col--7:before, .col--7:after {
    content: '';
    display: table;
  }
  .col--7:after {
    clear: both;
  }
  .col--7:last-child {
    margin-right: 0%;
  }

  .col--push-7 {
    position: relative;
    left: 59.86842%;
  }

  .col--pull-7 {
    position: relative;
    left: -59.86842%;
  }

  .col--8 {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 65.78947%;
    margin-left: 0%;
    margin-right: 2.63158%;
  }
  .col--8:before, .col--8:after {
    content: '';
    display: table;
  }
  .col--8:after {
    clear: both;
  }
  .col--8:last-child {
    margin-right: 0%;
  }

  .col--push-8 {
    position: relative;
    left: 68.42105%;
  }

  .col--pull-8 {
    position: relative;
    left: -68.42105%;
  }

  .col--9 {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 74.34211%;
    margin-left: 0%;
    margin-right: 2.63158%;
  }
  .col--9:before, .col--9:after {
    content: '';
    display: table;
  }
  .col--9:after {
    clear: both;
  }
  .col--9:last-child {
    margin-right: 0%;
  }

  .col--push-9 {
    position: relative;
    left: 76.97368%;
  }

  .col--pull-9 {
    position: relative;
    left: -76.97368%;
  }

  .col--10 {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 82.89474%;
    margin-left: 0%;
    margin-right: 2.63158%;
  }
  .col--10:before, .col--10:after {
    content: '';
    display: table;
  }
  .col--10:after {
    clear: both;
  }
  .col--10:last-child {
    margin-right: 0%;
  }

  .col--push-10 {
    position: relative;
    left: 85.52632%;
  }

  .col--pull-10 {
    position: relative;
    left: -85.52632%;
  }

  .col--11 {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 91.44737%;
    margin-left: 0%;
    margin-right: 2.63158%;
  }
  .col--11:before, .col--11:after {
    content: '';
    display: table;
  }
  .col--11:after {
    clear: both;
  }
  .col--11:last-child {
    margin-right: 0%;
  }

  .col--push-11 {
    position: relative;
    left: 94.07895%;
  }

  .col--pull-11 {
    position: relative;
    left: -94.07895%;
  }

  .col--12 {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 100%;
    margin-left: 0%;
    margin-right: 2.63158%;
  }
  .col--12:before, .col--12:after {
    content: '';
    display: table;
  }
  .col--12:after {
    clear: both;
  }
  .col--12:last-child {
    margin-right: 0%;
  }

  .col--push-12 {
    position: relative;
    left: 102.63158%;
  }

  .col--pull-12 {
    position: relative;
    left: -102.63158%;
  }
}
@media (max-width: 768px) {
  .container {
    max-width: 95%;
  }

  .row [class^="col--"]:first-child {
    margin-bottom: 1.5rem;
  }
}
@media (min-width: 970px) {
  .container {
    max-width: 960px;
  }
}
@media (min-width: 1200px) {
  .container {
    max-width: 1140px;
  }
}
ul,
ol {
  margin-bottom: 1rem;
  padding-left: 22px;
}
ul ul,
ul ol,
ol ul,
ol ol {
  margin-bottom: 0;
}

ul.list--unstyled,
ol.list--unstyled {
  margin: 0;
  padding: 0;
}
ul.list--unstyled li,
ol.list--unstyled li {
  margin: 0;
  padding: 0;
  list-style: none;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  line-height: 1.2;
  margin: 0;
  font-weight: 300;
  font-family: 'Helvetica Neue', Helvetica, sans-serif;
  margin-bottom: 1.5rem;
}

h1 {
  font-size: 2.4rem;
}

h2 {
  font-size: 2rem;
}

h3 {
  font-size: 1.7rem;
}

h4 {
  font-size: 1.4rem;
}

h5 {
  font-size: 1.2rem;
}

h6 {
  font-size: 1rem;
}

h1 small,
h2 small,
h3 small,
h4 small,
h5 small,
h6 small {
  font-size: 0.625em;
  color: #aaa;
}

p {
  line-height: 1.7;
  margin-bottom: 1rem;
}

p.lead {
  font-size: 1.375em;
  font-weight: 300;
}

small,
.small {
  font-size: 0.75rem;
}

.big {
  font-size: 1.25rem;
}

b,
strong {
  font-weight: 700;
}

i,
em {
  font-style: italic;
}

a {
  color: #0074D9;
  transition: all 0.2s;
  text-decoration: none;
}
a.secundary {
  color: #2ECC40;
}

a:active,
a:focus,
a:hover {
  color: #005fc4;
}
a:active.secundary,
a:focus.secundary,
a:hover.secundary {
  color: #19b72b;
}

blockquote {
  border-left: 2px solid #aaa;
  padding: 0.5rem 1rem;
  margin-bottom: 1rem;
  font-size: 1.1rem;
  color: #aaa;
}
blockquote cite {
  font-size: 0.8rem;
  color: #aaa;
}
blockquote cite:before {
  content: "— ";
}

hr {
  border: 0;
  border-bottom: 1px solid #ededed;
  margin: 20px 0 20px 0;
  clear: both;
}

pre,
code {
  font-family: Menlo, Consolas, "Courier New", monospace;
  font-size: 0.875rem;
  line-height: 2;
  color: #DCDCDC;
  background-color: #3F3F3F;
  border: 1px solid #3F3F3F;
  border-radius: 3px;
  padding: 0.8rem 1rem;
  white-space: pre-wrap;
  word-break: break-all;
  word-wrap: break-word;
}

pre {
  margin-bottom: 1rem;
}

code {
  display: inline-block;
  padding: 0.1rem 0.3rem;
}

.text--left {
  text-align: left;
}

.text--center {
  text-align: center;
}

.text--right {
  text-align: right;
}

.text--justify {
  text-align: justify;
}

.text--nowrap {
  white-space: nowrap;
}

.text--lowercase {
  text-transform: lowercase;
}

.text--uppercase {
  text-transform: uppercase;
}

.text--capitalize {
  text-transform: capitalize;
}
